name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.repository.updated_at }}
          VCS_REF=${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
      url: https://staging.quantumedge.example.com
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying ${{ needs.build-and-push.outputs.image-tag }} to staging"
        # Add actual deployment commands here
        # kubectl set image deployment/quantumedge quantumedge=${{ needs.build-and-push.outputs.image-tag }}
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging"
        # Add smoke test commands here
    
    - name: Notify deployment
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: 'https://staging.quantumedge.example.com',
            description: 'Deployed to staging'
          });

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://quantumedge.example.com
    
    steps:
    - name: Production deployment approval check
      run: |
        echo "Production deployment approved"
    
    - name: Deploy to production
      run: |
        echo "Deploying ${{ needs.build-and-push.outputs.image-tag }} to production"
        # Add actual production deployment commands here
    
    - name: Run production health checks
      run: |
        echo "Running production health checks"
        # Add health check commands here
    
    - name: Create release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = '${{ needs.build-and-push.outputs.image-tag }}'.split(':')[1];
          await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: `Release ${tag}`,
            body: 'Production deployment of QuantumEdge',
            draft: false,
            prerelease: false
          });