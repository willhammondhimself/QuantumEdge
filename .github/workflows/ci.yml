name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit[toml] safety
    
    - name: Format check with Black
      run: |
        black --check --diff src/ tests/ examples/
    
    - name: Lint with Flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ examples/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ tests/ examples/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --ignore=E501,W503,E203
    
    - name: Type check with mypy
      run: |
        pip install -r requirements.txt
        mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true
    
    - name: Security check with Bandit
      run: |
        bandit -r src/ -ll -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies with Safety
      run: |
        safety check --json || true
      continue-on-error: true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-asyncio pytest-timeout
    
    - name: Run tests with coverage
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing --timeout=300
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run integration tests
      run: |
        # Run integration tests, skip if no tests found
        pytest tests/integration/ -v --tb=short || echo "Integration tests skipped or passed"
      continue-on-error: true

  docker-build:
    name: Docker Build Verification
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: quantumedge:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
    
    - name: Test Docker image
      run: |
        docker run --rm quantumedge:latest python -c "import src; print('Docker image OK')"
      continue-on-error: true

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        # Run performance tests if they exist
        if [ -d "tests/performance" ]; then
          pytest tests/performance/ -v --benchmark-only
        else
          echo "No performance tests found, skipping..."
        fi
      continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy placeholder
      run: |
        echo "Deployment to staging would happen here"
        echo "This is a placeholder for future deployment configuration"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create release placeholder
      run: |
        echo "Release creation would happen here"
        echo "This is a placeholder for future release automation"